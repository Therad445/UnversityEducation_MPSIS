module CYBERcobra (
    input logic clk_i,
    input logic rst_i,
    input logic [15:0] sw_i,
    
    output logic [31:0] out_o
);

logic [31:0] instr = 0;
logic [31:0] alu_result;
logic [31:0] read_result1;
logic [31:0] read_result2;
logic [31:0] pc = 0;
logic [31:0] write_data;
logic [31:0] sum = 0;
logic jump;
logic carry_dummy;
logic flag;

assign jump = instr[31] || (instr[30] && flag);

instr_mem instr_mem(
    .addr_i         (pc),
    .read_data_o    (instr)
);

rf_riscv rf (
    .clk_i          (clk_i),
    .write_enable_i (instr[29:28] != 2'b11),
    
    .write_addr_i   (instr[4:0]),
    .read_addr1_i   (instr[17:13]),
    .read_addr2_i   (instr[22:18]),
    
    .write_data_i   (write_data),
    .read_data1_o   (read_result1),
    .read_data2_o   (read_result2)
);

alu_riscv alu (
    .a_i        (read_result2),
    .b_i        (read_result1),
    .alu_op_i   (instr[27:23]),
    
    .flag_o     (flag),
    .result_o   (alu_result)
);

fulladder32 fa(
    .a_i        (pc),
    .b_i        (jump ? { {22{instr[12]}}, (instr[12:5]), {2{1'b0}}} : 4),
    .carry_i    (0),
    
    .sum_o      (sum),
    .carry_o    (carry_dummy)
);

always_ff @(posedge clk_i) begin
    pc <= rst_i ? 0 : sum;
end

always_comb begin
    case (instr[29:28])
        2'b00 : write_data <= { {9{instr[27]}}, (instr[27:5])};
        2'b01 : write_data <= alu_result;
        2'b10 : write_data <= { {16{sw_i[15]}}, (sw_i)};
        2'b11 : write_data <= 32'b0;
    endcase
    out_o <= instr[31] || instr[30] ? out_o : write_data;
end

endmodule
